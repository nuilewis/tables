version: 2.1

##--------Command to download Artifacts with optional paramters-----------##
commands:
  get-artifacts:
    parameters:
      description:
        type: string
      circleci-token:
        type: string
        default: $API_TOKEN
      repo-name:
        type: string
      branch-name:
        type: string
        default: $CIRCLE_BRANCH
    description: <<parameters.description>>

    steps:
      - run:
          name: Get Artifacts
          command: |
          
            # Install jq for json parsing
            sudo apt-get update
            sudo apt-get install jq

            # Set your CircleCI API token
            CIRCLECI_TOKEN=<<parameters.circleci-token>>

            # Set the repository and branch
            REPO_NAME=<<parameters.repo-name>>
            BRANCH=<<parameters.branch-name>>

            # Variables to hold successfule job details
            SUCCESSFUL_JOB_ID=""
            SUCCESSFUL_JOB_NAME=""
            SUCCESSFUL_JOB_NUMBER=""
            SUCCESSFUL_JOB_STATUS=""
            SUCCESSFUL_JOB_TYPE="" 



            # Make the API request to get the pipelines of the repository
            PIPELINES_RESPONSE=$(
            curl --location --request GET "https://circleci.com/api/v2/project/github/${CIRCLE_USERNAME}/${REPO_NAME}/pipeline?branch=${BRANCH}&status=success" \
             --header 'Content-Type: application/json' \
              -u "${CIRCLECI_TOKEN}:" \
            ) 

            # Plan --
            # get list of all pipelines
            # run a for loop for each pipeline and get its workflows
            # use the workflows to get the job numbers and job ids
            # run a request to get the job details for each job
            # check if the job is of type 'build' and status is 'successful'
            # set that job id as the successful job id, and job number
            # break from the loop
            # use that job id and job number to now get the artifact

            # echo "pipeline response is $PIPELINES_RESPONSE"

            # Parse pipeline list into a list of strings
            PIPELINES_LIST=()

            for item in $(echo "$PIPELINES_RESPONSE" | jq -r '.items[]'); do
              PIPELINES_LIST+=("$item")
              done

            # parse  pipeline response json into a list
            # PIPELINES_LIST=$(echo "$PIPELINES_RESPONSE" | jq -r '.items[]') 

            echo "pipeline_lis is $PIPELINES_LIST"

            for pipeline in ${PIPELINES_LIST[@]}; do

              echo "Running pipeline for loop"
              echo "pipeline json structure is "
              echo "$pipeline"

              PIPELINE_ID=$(echo "$pipeline" | jq -r '.id')
              PIPELINE_NUMBER=$(echo "$pipeline" | jq -r '.number')

              echo "current pipeline id is $PIPELINE_ID"
              echo "current pipeline number is $PIPELINE_NUMBER"

              # Make the API request to get Workflow using Pipeline ID for each pipeline
              WORKFLOWS=$( 
              curl --location --request GET "https://circleci.com/api/v2/pipeline/${PIPELINE_ID}/workflow" \
                --header 'Content-Type: application/json' \
                -u "${CIRCLECI_TOKEN}:" \
                )
           
              WORKFLOW_ID=$(echo "$WORKFLOWS" | jq -r '.items[0].id')  
              WORKFLOW_NAME=$(echo "$WORKFLOWS" | jq -r '.items[0].name')
              WORKFLOW_STATUS=$(echo "$WORKFLOWS" | jq -r '.items[0].status')    
              echo "workflow id is $WORKFLOW_ID"
              echo "workflow name is $WORKFLOW_NAME"
              echo "workflow status is $WORKFLOW_STATUS"

              # Make the API request to get Jobs from workflows for each pipeline
              JOBS_RESPONSE=$( 
              curl --location --request GET "https://circleci.com/api/v2/workflow/${WORKFLOW_ID}/job" \
                --header 'Content-Type: application/json' \
                -u "${CIRCLECI_TOKEN}:" \
                )

                JOBS_LIST=$(echo "$JOBS_RESPONSE" | jq -r '.items[]') 

                # Run another for loop in the jobs to get only the build jobs, since we have multiple jobs, but most often have only one workflow
                for job in $JOBS_LIST; do

                  echo "Running job for loop"
                  JOB_STATUS=$(echo "$job" | jq -r '.status')
                  JOB_TYPE=$(echo "$job" | jq -r '.type') 

                   if [ "$JOB_STATUS" = "success" ] && [ "$JOB_TYPE" = "build" ]; then
                        echo "Found a successful 'Build' job"
                        echo "Status: $status, Type: $type"

                        SUCCESSFUL_JOB_ID=$(echo "$job" | jq -r '.id')  
                        SUCCESSFUL_JOB_NAME=$(echo "$job" | jq -r '.name')
                        SUCCESSFUL_JOB_NUMBER=$(echo "$job" | jq -r '.job_number')
                        SUCCESSFUL_JOB_STATUS=$(echo "$job" | jq -r '.status')
                        SUCCESSFUL_JOB_TYPE=$(echo "$job" | jq -r '.type') 

                        echo "Successful job id is $SUCCESSFUL_JOB_ID"
                        echo "Successful job name is $SUCCESSFUL_JOB_NAME"
                        echo "Successful job number is $SUCCESSFUL_JOB_NUMBER"
                        echo "Successful job status is $SUCCESSFUL_JOB_STATUS"
                        echo "Successful job type is $SUCCESSFUL_JOB_TYPE"
                        break
                    fi
                done
                break
 
            done

            
            # Make the API request to get the artifacts from job
            ARTIFACTS=$( 
            curl --location --request GET "https://circleci.com/api/v2/project/github/$CIRCLE_USERNAME/$REPO_NAME/$SUCCESSFUL_JOB_NUMBER/artifacts" \
              --header 'Content-Type: application/json' \
              -u "${CIRCLECI_TOKEN}:" \
              )
            ARTIFACT_PATHS=$(echo "$ARTIFACTS" | jq -r '.items[].path')  
            ARTIFACT_URLS=$(echo "$ARTIFACTS" | jq -r '.items[].url')
       
            echo "artifact path is $ARTIFACT_PATHS"
            echo "artifact url is $ARTIFACT_URLS"

            # Download artifacts
            for artifact_url in $ARTIFACT_URLS; do
              # Split the given string and extract only the string after the last forward slash ("/") and use as a filename to save
              filename=$(basename $artifact_url)
              curl -sSL -o $filename $artifact_url
            done
  push-appdesigner-files-to-device:
    description: Clone and push the necessary ODK-X App Designer files to the emulator prior to testing Tables
    steps:
      - node/install
      - run:
          name: Run node --version & npm --version
          command: |
            node --version
            npm --version
      - run:
          name: Install grunt
          command: |
            npm install -g grunt-cli
            grunt --version
      - run:
          name: clone app designer repository to environemt
          command: |
            git clone -b "$CIRCLE_BRANCH" "https://github.com/$GITHUB_ACTOR/app-designer.git"
            ls -d */
            cd app-designer/
            ls -d */
            npm install grunt --save-dev
           # echo "git clone -b "$CIRCLE_BRANCH" "https://$GITHUB_TOKEN@github.com/$GITHUB_ACTOR/app-designer.git""
      - run:
          name: Push Files to Emulator
          command: |
            cd ~
            ls -d */
            cd app-designer/
            grunt pushadb

                    
orbs:
  android: circleci/android@2.3.0
  node: circleci/node@5.1.0
jobs:
  test:
    description: Runs unit tests and instrumented tests on the Tables app
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1

    steps:
      - checkout
      - run:
          name: Install OpenJDK 8
          command: |
            sudo apt-get update && sudo apt-get install -y openjdk-8-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
            echo 'export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"' >> $BASH_ENV
            java -version
      - run:
          name: Chmod Permissions
          command: sudo chmod +x gradlew

      - run:
          name: Update Package list
          command: sudo apt-get update
      # - run:
      #     name: Install the latest Android SDK
      #     command: |
      #       sdkmanager --update
      - get-artifacts:
          description: Get artifacts from the 'Services' repository
          circleci-token: $API_TOKEN
          repo-name: 'services'
          branch-name: $CIRCLE_BRANCH

      - get-artifacts:
          description: Get artifacts from the 'Survey' repository
          circleci-token: $API_TOKEN
          repo-name: 'survey'
          branch-name: $CIRCLE_BRANCH
      
      # Runs command to push the ODK-X App Designer files to the emulator
      - push-appdesigner-files-to-device

      - android/create-avd:
          avd-name: customavd
          install: true
          system-image: system-images;android-29;default;x86_64
          additional-args: --sdcard 2048M

      - android/start-emulator:
          avd-name: customavd
          no-window: true
          restore-gradle-cache-prefix: v1
          post-emulator-launch-assemble-command: ./gradlew assemble
      
      # Install Dependncies to emulator
      - run:
          name: Install 'Services' app from downloaded artifacts to emulator
          command: |

            # Install Services App on emulator, Will use the `services_app-snapshot-basic-debug.apk` artifact downloaded from the get artifact jobs
            adb install services_app-snapshot-basic-debug.apk
            adb shell pm list packages
            # Install Services app to emulator
      - run:
          name: Install 'Survey' app from downloaded artifacts to emulator
          command: |

            # Install Survey App on emulator, Will use the `survey_app-snapshot-basic-debug.apk` artifact downloaded from the get artifact jobs
            adb install survey_app-snapshot-basic-debug.apk
            adb shell pm list packages



      - android/run-tests:
          test-command: ./gradlew test

      - android/run-tests:
          test-command: ./gradlew connectedAndroidTest
      - android/save-gradle-cache:
          cache-prefix: v1

  build:
    docker:
      - image: cimg/android:2023.06
    steps:
      - checkout
      - run:
          name: Install OpenJDK 8
          command: |
            sudo apt-get update && sudo apt-get install -y openjdk-8-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac
            echo 'export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"' >> $BASH_ENV
            java -version

      - run:
          name: Chmod Permissions
          command: sudo chmod +x gradlew
      - android/restore-gradle-cache:
          cache-prefix: v1

      - run:
          name: Echo Java home
          command: |
            echo $JAVA_HOME  

      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - android/save-gradle-cache:
          cache-prefix: v1
      - run:
          name: Build Services
          command: ./gradlew assemble


workflows:
  build-test-deploy-workflow:
    jobs:
      - test
      # - build
      # - test:
      #     requires:
      #       - build




